import pygame
import random
from model_a import Snake, Eatable_Object  


class Controller:
    """Manages game logic and events."""

    def __init__(self):
        """Initializes the game window and objects."""
        pygame.init()
        self.WIDTH, self.HEIGHT = 400, 400
        self.screen = pygame.display.set_mode((self.WIDTH, self.HEIGHT))
        self.clock = pygame.time.Clock()

        # Initialize models
        self.snake = Snake()  
        self.apple = Eatable_Object()  

        self.snake_body = [(self.snake.x, self.snake.y)]
        self.snake_dir = (0, 0)
        self.running = True
        

    def handle_events(self):
        """Handles user input and game events."""
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and self.snake_dir != (0, 20):
                    self.snake_dir = (0, -20)

                elif event.key == pygame.K_DOWN and self.snake_dir != (0, -20):
                    self.snake_dir = (0, 20)
        
                elif event.key == pygame.K_LEFT and self.snake_dir != (20, 0):
                    self.snake_dir = (-20, 0)

                elif event.key == pygame.K_RIGHT and self.snake_dir != (-20, 0):
                    self.snake_dir = (20, 0)
            


    def update_models(self):
        """Updates the game state"""
        if self.snake_dir != (0, 0):
            new_head = (self.snake_body[0][0] + self.snake_dir[0], self.snake_body[0][1] + self.snake_dir[1])
            self.snake_body = [new_head] + self.snake_body[:-1]

         
            if self.snake_dir == (20,0):
             self.snake.x = self.snake.x + 20

            if self.snake_dir == (-20, 0):
             self.snake.x = self.snake.x - 20

            if self.snake_dir == (0,20):
             self.snake.y = self.snake.y - 20

            if self.snake_dir == (0, -20):
             self.snake.y = self.snake.y + 20

                
            if self.snake.x > 380 or self.snake.x < 0 or self.snake.y > 400 or self.snake.y < 20:
             self.running = False

        for i in range(1, 1000):
            if self.snake_body[0] in self.snake_body[i:]:
                self.running = False 

        # Check collision with the apple
        if self.snake_body[0] == (self.apple.x, self.apple.y):
            self.snake_body.append(self.snake_body[-1])  
            self.apple.x = random.randrange(0, self.WIDTH, 20)
            self.apple.y = random.randrange(0, self.HEIGHT, 20)
            self.snake.score += 1
        
        
        
        # Started Working On Beginning Of Snake Contact Ending The Game, Will Complete Later
            

        for segment in self.snake_body:
            pygame.draw.rect(self.screen, (0, 255, 0), (*segment, 20, 20)) 
            pygame.draw.rect(self.screen, (255, 0, 0), (self.apple.x, self.apple.y, 20, 20))  
            pygame.display.flip()
            

    def draw(self):
        """Renders the game objects on the screen."""
        self.screen.fill((0, 0, 0))  
        for segment in self.snake_body:
            pygame.draw.rect(self.screen, (0, 255, 0), (*segment, 20, 20))  
            pygame.draw.rect(self.screen, (255, 0, 0), (self.apple.x, self.apple.y, 20, 20))  
            pygame.display.flip()
    
    def writing(self):
   

        # Draw the score
        score = self.snake.score
        font = pygame.font.Font(None, 36)
        text = font.render(f"Score: {score}", True, "White")
        textRectangle = text.get_rect()
        textRectangle.topleft = (10, 10)

        pygame.draw.rect(self.screen, (0, 0, 0), textRectangle)  
        self.screen.blit(text, textRectangle)

        pygame.display.update(textRectangle)  




    

    
    def mainloop(self):
        """Main game loop."""
        while self.running:
            self.handle_events()
            self.update_models()
            self.draw()
            self.writing()
            self.clock.tick(8) 
        pygame.quit()

# Run the controller
if __name__ == "__main__":
    game = Controller()
    game.mainloop()
    
